--ОКОННЫЕ ФУНКЦИИ--

--хотим посмотреть средние цены по категории--
SELECT category_id, AVG (unit_price) AS avg_price
FROM products
GROUP BY category_id
LIMIT 5

--а что если мы хотим сравнивать цену каждого продукта со средней в его категории--

SELECT category_id, category_name, product_name, 
unit_price, AVG(unit_price) OVER (PARTITION BY category_id) AS avg_price
FROM products
JOIN categories USING (category_id)

--что если мы хотим сделать группировку по ордер_ид и посчитать наростающий итог по продакт_ид--
SELECT order_id, order_date, product_id, customer_id, unit_price AS sub_total, 
		SUM(unit_price) OVER(PARTITION BY order_id ORDER BY product_id) AS sale_sum
FROM orders
JOIN order_details USING (order_id)
ORDER BY order_id;

--а что если мы хотим посчтиать наростающий итог по всем ордерам вообще, тогда по чему нам делать партицию? по чему делать ордер бай--
SELECT order_id, order_date, product_id, customer_id, unit_price AS sub_total, 
		SUM(unit_price) OVER(ORDER BY order_id) AS sale_sum
FROM orders
JOIN order_details USING (order_id)
ORDER BY order_id;--нету никакого наростающего итога--	

--нужно сгенерить "сквозняковій айдішник" c помощью фнции ров намбер --
SELECT row_id, order_id, order_date, product_id, customer_id, unit_price AS sub_total, 
		SUM(unit_price) OVER(ORDER BY row_id) AS sale_sum
FROM
(
	SELECT order_id, order_date, product_id, customer_id, unit_price, 
		row_number() OVER() AS row_id
	FROM orders
	JOIN order_details USING (order_id)
) subquery
ORDER BY order_id;


--ФУНКЦИИ РАНЖИРОВАНИЯ--
SELECT * FROM products

--RANK присваивает ранг, работает также как и row_number если набор уникальный--
SELECT product_name, units_in_stock,
	RANK() OVER(ORDER BY product_id)
FROM products;

SELECT product_name, units_in_stock,
	RANK() OVER(ORDER BY units_in_stock)
FROM products;

--денг єто как густой--
SELECT product_name, units_in_stock,
	DENSE_RANK() OVER(ORDER BY units_in_stock)
FROM products;

--усложним задачу, выставим ранг в зависимости от условий--
SELECT product_name, unit_price,
	DENSE_RANK() OVER(
		ORDER BY
			CASE 
				WHEN unit_price > 80 THEN 1
				WHEN unit_price > 30 AND  unit_price < 80 THEN 2  
				ELSE 3
			END
) AS ranking
FROM products
ORDER BY unit_price DESC;

--мы хотим посмотреть отличия текущей цены от предыдущей, фукция ЛАГ (отставание)--
SELECT product_name, unit_price,
	LAG(unit_price) OVER(ORDER BY unit_price DESC) - unit_price AS price_lag
FROM products
ORDER BY unit_price DESC;

--функция лид удобна при анализе данных с временными метками--
SELECT product_name, unit_price,
	LEAD(unit_price, 2) OVER(ORDER BY unit_price) - unit_price AS price_lag
FROM products
ORDER BY unit_price;



--РАНЖИРОВАНИЕ
--нужно отсортировать юнит прайс, присвоить роолл намбер, как вытащить данные опр ранга без ЛИМИТА--
SELECT *
FROM products
WHERE product_id = ANY(
	SELECT product_id
	FROM (
		SELECT product_id, unit_price,
			ROW_NUMBER() OVER(ORDER BY unit_price DESC) AS nth
		FROM products
		) sorted_prices
	WHERE nth < 4
	);

--тоже самое только по другому
SELECT *
FROM (SELECT product_id, product_name, category_id, unit_price, units_in_stock,
	 ROW_NUMBER() OVER(ORDER BY unit_price DESC) AS nth
	 FROM products
	 ) AS sorted_prices
WHERE nth < 4
ORDER BY unit_price

--присвоим ранк на основании..--
SELECT *
FROM 
(
	SELECT order_id, product_id, unit_price, quantity,
		RANK() OVER(PARTITION BY order_id ORDER BY (quantity) DESC) AS rank_quant
	FROM orders
	JOIN order_details USING (order_id)
) AS suquerry
WHERE rank_quant <=3



--Вывести отчёт показывающий по сотрудникам суммы продаж SUM(unit_price*quantity), 
--и сопоставляющий их со средним значением суммы продаж по сотрудникам (AVG по SUM(unit_price*quantity)) |
--сортированный по сумме продаж по убыванию.

--Вывести ранг сотрудников по их зарплате, без пропусков. Также вывести имя, фамилию и должность.

--задание 1
SELECT DISTINCT employee_id, total_by_emp, AVG(total_by_emp) OVER () AS avg_price
FROM
	(SELECT employee_id, SUM(unit_price*quantity) OVER (PARTITION BY employee_id) as total_by_emp
	FROM orders
	LEFT JOIN order_details USING (order_id)
) q
ORDER BY total_by_emp DESC;

--задание 2
SELECT first_name, last_name, title, extension,
	DENSE_RANK() OVER(ORDER BY extension DESC)
FROM employees;
