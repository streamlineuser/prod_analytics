--ТРАНЗАКЦИИ--


--хотим найти продукты в продажах которых меньше 10, установить дисконт 1, и...
WITH prod_update AS 
(
	UPDATE products 
	SET discontinued = 1
	WHERE units_in_stock < 10
	RETURNING product_id
)
SELECT * INTO last_orders_on_discontinued
FROM order_details 
WHERE product_id IN (SELECT product_id FROM prod_update);

--если мы хотим сделать это все через транзакции явно:
BEGIN;
--здесь идет первая транзакция
WITH prod_update AS 
(
	UPDATE products 
	SET discontinued = 1
	WHERE units_in_stock < 10
	RETURNING product_id
)
--здесь идет вторая транзакция
SELECT * INTO last_orders_on_discontinued
FROM order_details 
WHERE product_id IN (SELECT product_id FROM prod_update);

DELETE FROM order_details 
WHERE product_id IN (SELECT product_id FROM last_orders_on_discontinued)

SELECT COUNT(*) FROM order_details

ROLLBACK;

COMMIT;

SELECT * FROM last_orders_on_discontinued;

DROP TABLE IF EXISTS last_orders_on_discontinued;

--ЧЕРЕЗ СЕЙВПОИТЫ

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
WITH prod_update AS 
(
	UPDATE products 
	SET discontinued = 1
	WHERE units_in_stock < 10
	RETURNING product_id
)

SELECT * INTO last_orders_on_discontinued
FROM order_details 
WHERE product_id IN (SELECT product_id FROM prod_update);

SAVEPOINT backup;


DELETE FROM order_details 
WHERE product_id IN (SELECT product_id FROM last_orders_on_discontinued);

ROLLBACK TO backup;

UPDATE order_details 
SET quantity = 0
WHERE product_id IN (SELECT product_id FROM last_orders_on_discontinued); 

COMMIT;

SELECT COUNT (*) FROM order_details
SELECT * FROM last_orders_on_discontinued;

SELECT * 
FROM order_details
WHERE product_id IN (SELECT product_id FROM last_orders_on_discontinued); 

DROP TABLE IF EXISTS last_orders_on_discontinued;


--например мы хотим проиндексировать запралату рабочим и тем у кого зп меньше 10 умножить на 1,5, а другим понизить
BEGIN;
ALTER TABLE employees 
ADD COLUMN salary decimal (12,2);

UPDATE employees SET salary = random()*100;
COMMIT;

SELECT * FROM employees

BEGIN;
UPDATE employees
SET salary = salary * 1.5
WHERE salary < 50;

SAVEPOINT increase_salary;

UPDATE employees
SET salary = salary * 0.8
WHERE salary > 70;

ROLLBACK TO increase_salary;

UPDATE employees 
SET salary = 0
WHERE employee_id = 9;

COMMIT;



--ДЗ по ТРАНЗАКЦИЯМ

--задание 1--

BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE arc_poor_customers AS
	SELECT customer_id, company_name, SUM (unit_price * quantity) AS total
	FROM orders
	JOIN order_details USING (order_id)
	JOIN customers USING (customer_id)
	GROUP BY company_name, customer_id
	HAVING SUM (unit_price * quantity) < 2000
	ORDER BY SUM (unit_price * quantity) DESC;
	
	DELETE FROM order_details
	WHERE order_id IN (SELECT order_id 
					   FROM orders
					  	WHERE customer_id IN (SELECT customer_id FROM arc_poor_customers));

	DELETE FROM orders
	WHERE customer_id IN (SELECT customer_id FROM arc_poor_customers);
	
	DELETE FROM customers 
	WHERE customer_id IN (SELECT customer_id FROM arc_poor_customers);

COMMIT;
			   
SELECT * FROM arc_poor_customers;



--задание 2--

SELECT * FROM products

BEGIN;

CREATE TABLE prod_discont AS
SELECT * FROM products
WHERE discontinued = 1;

SAVEPOINT newlevel;

DELETE FROM order_details
	WHERE product_id IN (SELECT product_id FROM prod_discont);

	--DELETE FROM orders
	--WHERE product_id IN (SELECT product_id FROM prod_discont);


DELETE FROM products
WHERE discontinued = 1; 

ROLLBACK TO prod_discont;

COMMIT;

SELECT * FROM prod_discont;
